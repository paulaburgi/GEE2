// import data and regions of interest
var int_all = ee.ImageCollection("users/pmb229/cascadia/all_good_int1"); 
var gin  = ee.Geometry.Rectangle([-123.37522, 43.82465, -123.3696, 43.827]); 
var gout = ee.Geometry.Rectangle([-123.36539, 43.82871, -123.35986, 43.83109]); 
var image = ee.Image(int_all.first())

// add property with time
var dfunc = function(image) {
  var date1 = ee.String(image.get('date1'))
  var y1    = ee.Number.parse(ee.String('20').cat(date1.slice(1,3)))
  var m1    = ee.Number.parse(date1.slice(3,5))
  var d1    = ee.Number.parse(date1.slice(5))
  var dt    = ee.Date.fromYMD(y1, m1, d1)
  var dt1   = dt.millis()
  var image = image.set('system:time_start', dt1).set('DATE', dt)
  return image }
var int_all = int_all.map(dfunc)
// var int_sum = int_all.filter(ee.Filter.dayOfYear(105, 288))
// var int_win = int_all.filter(ee.Filter.dayOfYear(288, 105))


// get circular mean, and circular difference
var imf = function(image) {
  var s = image.sin()
  var c = image.cos()
  var sum_cos_in = ee.Array(c.reduceRegion({
  reducer: ee.Reducer.sum(), 
  geometry: gin,
  scale: 1}).get('b1'))
  var sum_sin_in = ee.Array(s.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: gin,
  scale: 1}).get('b1'))
  var sum_cos_out = ee.Array(c.reduceRegion({
  reducer: ee.Reducer.sum(), 
  geometry: gout,
  scale: 1}).get('b1'))
  var sum_sin_out = ee.Array(s.reduceRegion({
  reducer: ee.Reducer.sum(),
  geometry: gout,
  scale: 1}).get('b1'))
    var m_in  = sum_cos_in.atan2(sum_sin_in)
    var m_out = sum_cos_out.atan2(sum_sin_out)
    var phs1   = ee.Array(m_in)
    var phs2   = ee.Array(m_out)  
    var den   = phs2.cos().pow(2).add(phs2.sin().pow(2))
    var rl1   = phs2.cos().multiply(phs1.cos()).add(phs1.sin().multiply(phs2.sin()))
    var rl    = rl1.divide(den)
    var im1   = phs1.cos().multiply(phs2.sin()).multiply(-1).add(phs1.sin().multiply(phs2.cos()))
    var im    = im1.divide(den)
    var pd    = rl.atan2(im)
  var phsdif  = ee.Number(pd.float())
  var image = image
  .set('meanphs_in', m_in)
  .set('meanphs_out', m_out)
  .set('meanphsdiff', phsdif)
  return image
  }
// Add phase difference property each interferogram
var int_all_mean = int_all.map(imf)

// take int_all_mean, and make new img collections, where
// baselines/phsdiff are set to null if not in correct season. 
var sumfunc = function(image) {
  var d1s = image.get('date1')
  var pdf = image.get('meanphsdiff')
  var blf = image.get('baseline')
  
  var d1n = ee.Number.parse(ee.String(d1s).slice(3,5))
  var pdfi = ee.Algorithms.If(d1n.gt(4).bitwiseAnd(d1n.lt(11)), pdf, 1.3138426354689958)
  var blfi = ee.Algorithms.If(d1n.gt(4).bitwiseAnd(d1n.lt(11)), blf, 1.3138426354689958)
  
  var image = image
  .set('meanphsdiff', pdfi)
  .set('baseline', blfi)
  return image
  }
var winfunc = function(image) {
  var d1s = image.get('date1')
  var pdf = image.get('meanphsdiff')
  var blf = image.get('baseline')
  
  var d1n = ee.Number.parse(ee.String(d1s).slice(3,5))
  var pdfi = ee.Algorithms.If(d1n.gt(10).bitwiseOr(d1n.lt(5)), pdf, -1.3138426354689958)
  var blfi = ee.Algorithms.If(d1n.gt(10).bitwiseOr(d1n.lt(5)), blf, -1.3138426354689958)
  
  var image = image
  .set('meanphsdiff', pdfi)
  .set('baseline', blfi)
  return image
  }
var int_sum_mean = int_all_mean.map(sumfunc)
var int_win_mean = int_all_mean.map(winfunc)



// variables to plot
var bl_all = int_all_mean.aggregate_array("baseline");
var pd_all = int_all_mean.aggregate_array("meanphsdiff");
var bl_sum = int_sum_mean.aggregate_array("baseline");
var pd_sum = int_sum_mean.aggregate_array("meanphsdiff");
var bl_win = int_win_mean.aggregate_array("baseline");
var pd_win = int_win_mean.aggregate_array("meanphsdiff");


// make plots
// PROBLEM: Can I plot chart2 and chart3 on same plot? 
var chart = ui.Chart.array.values(pd_all, 0, bl_all)
    .setOptions({
      vAxis: {'title': 'phase diff'},
      pointSize: 4,
      hAxis: {title: 'Baseline', viewWindow: {min: 0, max: 1800}},
      vAxis: {title: 'Phs Diff', viewWindow: {min:-3.14, max:3.14},
      ticks: [{v: -3.14, f: '3.14'},
                {v: 0, f: '0'},
                {v: 3.14, f: '3.14'}]}
});
var chart2 = ui.Chart.array.values(pd_sum, 0, bl_sum)
    .setOptions({
      colors: ['green'],
      vAxis: {'title': 'phase diff'},
      pointSize: 4,
      hAxis: {title: 'Baseline', viewWindow: {min: 0, max: 1800}},
      vAxis: {title: 'Phs Diff', viewWindow: {min:-3.14, max:3.14},
      ticks: [{v: -3.14, f: '3.14'},
                {v: 0, f: '0'},
                {v: 3.14, f: '3.14'}]}
});
var chart3 = ui.Chart.array.values(pd_win, 0, bl_win)
    .setOptions({
      colors: ['red'],
      vAxis: {'title': 'phase diff'},
      pointSize: 4,
      hAxis: {title: 'Baseline', viewWindow: {min: 0, max: 1800}},
      vAxis: {title: 'Phs Diff', viewWindow: {min:-3.14, max:3.14},
      ticks: [{v: -3.14, f: '3.14'},
                {v: 0, f: '0'},
                {v: 3.14, f: '3.14'}]}
});
print('all dates', chart, 'summer', chart2, 'winter', chart3)

var idx = int_all_mean.aggregate_array('system:index');
var pd_sum2 = ee.Dictionary.fromLists(idx, pd_sum)
var bl_sum2 = ee.Dictionary.fromLists(idx, bl_sum)
var pd_sum3 = pd_sum2.values()
var bl_sum3 = bl_sum2.values()
//var yValues = ee.Array.cat([bl_sum3, pd_sum3]);

var pd_sum = ee.List(pd_sum)
var bl_sum = ee.List(bl_sum)

var idx = int_sum_mean.aggregate_array('system:index');
var yy1 = int_sum_mean.aggregate_array('baseline');
var yy2 = int_sum_mean.aggregate_array('meanphsdiff'); //List<List<Float>>
var dic1 = ee.Dictionary.fromLists(idx, yy1) 
var dic2 = ee.Dictionary.fromLists(idx, yy2) // this doesn't work if yy1 changed to yy2
var arr1 = dic1.toArray(idx) //List<Array>
var arr2 = dic2.values(idx)  //List<List<Float>>
var yValues = ee.Array.cat([arr2, arr2], 1);

print('get', image.get('baseline'))

print('yValues', yValues, 'baseline', arr1, 'meanphsdiff', arr2)

// Define an arbitrary region of interest.
var sanFrancisco = ee.Geometry.Rectangle([-122.45, 37.74, -122.4, 37.8]);

// Load a Landsat 8 image.
var image = ee.Image('LANDSAT/LC08/C01/T1_TOA/LC08_044034_20140318');

// Get a dictionary with band names as keys, pixel lists as values.
var result = image.reduceRegion(ee.Reducer.toList(), sanFrancisco, 120);

// Convert the band data to plot on the y-axis to arrays.
var y1 = ee.Array(result.get('B5'));
var y2 = ee.Array(result.get('B6'));
// Concatenate the y-axis data by stacking the arrays on the 1-axis.
var yValues = ee.Array.cat([y1, y2], 1);















